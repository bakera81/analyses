[
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "This dataset comes from the Tidy Tuesday project from December 06, 2022.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#tidy-tuesday-nyc-elevators",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#tidy-tuesday-nyc-elevators",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "This dataset comes from the Tidy Tuesday project from December 06, 2022.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#load-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#load-data",
    "title": "Data Analysis Portfolio",
    "section": "Load data",
    "text": "Load data\nFirst step: let’s load up the Tidyverse and inspect our data.\n\nlibrary(tidyverse)\n\ntheme_set(theme_light())\n\ntt &lt;- tidytuesdayR::tt_load('2022-12-06')\n\n# What are we working with here?\ntt$elevators %&gt;% \n  janitor::clean_names() %&gt;%\n  glimpse()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#inspect-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#inspect-data",
    "title": "Data Analysis Portfolio",
    "section": "Inspect data",
    "text": "Inspect data\nWe’ve got a few data cleaning tasks:\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  count(zip_code, sort = T)\n\n# A tibble: 313 × 2\n    zip_code     n\n       &lt;dbl&gt; &lt;int&gt;\n 1         0  8389\n 2 100210000  3050\n 3 100220000  2505\n 4 100190000  2435\n 5 100010000  2116\n 6 100170000  2071\n 7 100360000  1845\n 8 100160000  1796\n 9 112010000  1440\n10 100180000  1420\n# ℹ 303 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  filter(str_detect(dv_floor_to, \"\\\\D\")) %&gt;%\n  count(dv_floor_to, sort = T)\n\n# A tibble: 504 × 2\n   dv_floor_to     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 PH           1739\n 2 R            1018\n 3 ST            501\n 4 L             234\n 5 G             214\n 6 M             200\n 7 RF            196\n 8 B             172\n 9 2ND           145\n10 3RD           113\n# ℹ 494 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  filter(!str_detect(dv_floor_to, \"\\\\D\")) %&gt;%\n  count(dv_floor_to) %&gt;%\n  arrange(desc(dv_floor_to)) \n\n# A tibble: 103 × 2\n   dv_floor_to     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 94              1\n 2 912             1\n 3 90              2\n 4 9            1439\n 5 86              2\n 6 83              2\n 7 80             13\n 8 8            2020\n 9 77              5\n10 757             1\n# ℹ 93 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  ggplot(aes(longitude, latitude, color = borough)) + \n  geom_point() + \n  labs(title = \"NYC Elevator Locations\")",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#clean-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#clean-data",
    "title": "Data Analysis Portfolio",
    "section": "Clean data",
    "text": "Clean data\nI’m gullible, but not that gullible: there shouldn’t be elevators that are 912 stories tall or in the middle of the ocean. Let’s clean this up.\n\nelevators &lt;- tt$elevators %&gt;%\n  janitor::clean_names() %&gt;% # Make column names snake_case\n  rename_all(str_remove, \"^dv_\") %&gt;% # Remove the \"DV_\" that starts many column names\n  mutate(\n    floor_to_raw = floor_to,\n    # Force convert to number, introducing NAs\n    floor_to = as.numeric(floor_to_raw), \n    # Remove bad datapoints with absurdly high floors\n    floor_to = if_else(floor_to &gt; 90, NA, floor_to), \n    # create explicit missing data for missing zipcodes\n    zip_code = na_if(zip_code, 0), \n    # Fix incorrectly formatted zips\n    zip_code = str_sub(zip_code, 1, 5)) %&gt;% \n  # Exclude a geographic outlier\n  filter(longitude &gt; -76) \n\nLooking at our cleaned data, how tall are these elevators?\n\nelevators %&gt;%\n  filter(!is.na(floor_to)) %&gt;%\n  mutate(floor_to = as.numeric(floor_to)) %&gt;%\n  ggplot(aes(floor_to)) + \n  geom_histogram() +\n  scale_x_log10(labels = scales::comma_format(1))",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#building-heights",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#building-heights",
    "title": "Data Analysis Portfolio",
    "section": "Building heights",
    "text": "Building heights\nNow let’s aggregate by building\n\nby_building &lt;- elevators %&gt;%\n  arrange(desc(floor_to)) %&gt;%\n  group_by(bin, house_number, street_name, zip_code, borough, longitude, latitude) %&gt;%\n  summarize(\n    max_floor = na_if(max(floor_to, na.rm = T), -Inf),\n    n_elevators = n(),\n    latitude = mean(latitude, na.rm = T),\n    longitude = mean(longitude, na.rm = T),\n    .groups = \"drop\") %&gt;%\n  arrange(desc(max_floor)) \n\ng &lt;- by_building %&gt;%\n  filter(!is.na(max_floor)) %&gt;%\n  arrange(max_floor) %&gt;%\n  ggplot(aes(longitude, latitude, color = max_floor)) +\n  geom_point() +\n  scale_color_gradient2(\n    trans = \"log10\",\n    low = \"blue\",\n    high = \"red\",\n    midpoint = log10(10)\n  ) + \n  ggthemes::theme_map() + \n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.05, 0.75)) +\n  labs(\n    title = \"Height of NYC elevators\",\n    color = \"Max floor\")\n\ng\n\n\n\n\n\n\n\n\nLet’s make this 3D!\n\nlibrary(rayshader)\nlibrary(rgl)\n\nplot_gg(\n  g, \n  multicore = T, # Use more cores for faster rendering\n  width = 6,     # Increase this (inches) for higher resolution\n  height = 6,    # Increase this (inches) for higher resolution\n  scale = 400    # Increase this for more pronounced elevation scaling\n)\nrglwidget()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-zip-code",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-zip-code",
    "title": "Data Analysis Portfolio",
    "section": "Elevator heights by zip code",
    "text": "Elevator heights by zip code\nJoin in zip code data to explore elevator heights by zip\n\nlibrary(sf)\n\nzip_codes &lt;- read_sf(\"data/Modified Zip Code Tabulation Areas (MODZCTA)_20250310\")\n\nby_zip_code &lt;- by_building %&gt;%\n filter(!is.na(zip_code)) %&gt;%\n group_by(zip_code, borough) %&gt;%\n summarize(\n   n_buildings = n(),\n   # geometric mean is a better measure of central tendency \n   #  because the elevator heights are log-normal\n   geom_mean_height = exp(mean(log(max_floor), na.rm = T)),\n   tallest_building = max(max_floor, na.rm = T),\n   .groups = \"drop\") %&gt;%\n filter(n_buildings &gt;= 20) %&gt;%\n arrange(desc(geom_mean_height))\n\njoined_zip_codes &lt;- zip_codes %&gt;%\n left_join(by_zip_code, by = c(\"modzcta\" = \"zip_code\"))\n # mutate(\n #   elevator_building_density = n_buildings / pop_est)\n\njoined_zip_codes %&gt;%\n ggplot(aes(fill = geom_mean_height)) +\n geom_sf() +\n scale_fill_gradient2(\n   low = \"blue\",\n   high = \"red\",\n   midpoint = log10(6),\n   trans = \"log10\") +\n ggthemes::theme_map() +\n coord_sf(datum = NA) +\n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.05, 0.7)) +\n labs(\n   title = \"Tallest zip codes in NYC\",\n   fill = \"Average (geometric) height of elevators\")",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-borough",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-borough",
    "title": "Data Analysis Portfolio",
    "section": "Elevator heights by borough",
    "text": "Elevator heights by borough\nHow do elevator heights vary by borough?\n\nby_building %&gt;%\n  filter(!is.na(borough)) %&gt;%\n  ggplot(aes(max_floor, borough)) +\n  geom_boxplot() + \n  scale_x_log10()\n\n\n\n\n\n\n\n\nAnd for folks less familiar with boxplots, here is the same data presented as densities:\n\nby_building %&gt;%\n  filter(!is.na(borough)) %&gt;%\n  ggplot(aes(max_floor, borough)) +\n  geom_violin() + \n  scale_x_log10()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-speed",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-speed",
    "title": "Data Analysis Portfolio",
    "section": "Elevator speed",
    "text": "Elevator speed\n\nelevators %&gt;%\n  mutate(floor_from = as.numeric(floor_from)) %&gt;%\n  ggplot(aes(floor_to - floor_from, parse_number(speed_fpm))) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10() +\n  labs(\n    title = \"Elevator heights vs speed\",\n    x = \"Elevator height (floors)\",\n    y = \"Speed (fpm)\")\n\n\n\n\n\n\n\n\nYou can see elevator speeds appear to be correlated with height. In a future analysis, we could find the elevators that are unusual, either unnecessarily fast or too slow given their height.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "septa_transit_times/septa-timetables.html",
    "href": "septa_transit_times/septa-timetables.html",
    "title": "Recreating Septa Transit Timetables in R",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\nlibrary(hms)\n\n\nAttaching package: 'hms'\n\nThe following object is masked from 'package:lubridate':\n\n    hms\n\n\n\nstops &lt;- \n  read_csv(\"chw-stops.csv\")\n\nRows: 14 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): fare_zone, stop_name, zone_id\ndbl (6): service_access, service_cash, service_park, stop_id, stop_lat, stop...\nlgl (2): stop_desc, stop_url\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntimes &lt;-\n  read_csv(\"times.csv\")\n\nRows: 14 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): stop_name\ntime (8): 8210, 8242, 8318, 8322, 8338, 8716, 8750, 8756\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstop_times &lt;- \n  times %&gt;%\n  left_join(stops, by = \"stop_name\")\n\n\nstop_times %&gt;%\n  mutate(across(matches(\"^[0-9]{4}$\"), as.POSIXct)) %&gt;%\n  gt() %&gt;%\n  cols_hide(c(\n    \"stop_url\", \"zone_id\", \"stop_desc\", \"stop_lat\", \"stop_lon\", \"stop_id\")) %&gt;%\n  fmt_time(\n    columns = matches(\"^[0-9]{4}$\"),\n    time_style = \"h_m_p\") %&gt;%\n  fmt(\n    columns = starts_with(\"service_\"),\n    fns = ~if_else(as.logical(.), \"&check;\", \"\")) %&gt;%\n  cols_label(\n    stop_name = \"Stations\",\n    service_access = \"A\",\n    service_cash = \"C\",\n    service_park = \"P\",\n    fare_zone = html(\"Fare&lt;br&gt;Zone\")) %&gt;%\n  tab_spanner(\n    columns = starts_with(\"service_\"),\n    label = \"Services\") %&gt;%\n  tab_spanner(\n    columns = matches(\"^[0-9]{4}$\"),\n    label = \"Train Number\") %&gt;%\n  cols_move_to_start(\"fare_zone\") %&gt;%\n  cols_move_to_start(starts_with(\"service_\")) %&gt;%\n  cols_width(\n    starts_with(\"service_\") ~ px(20),\n    starts_with(\"8\") ~ px(80)) %&gt;%\n  opt_row_striping(row_striping = T) %&gt;%\n  cols_align(\n    columns = \"fare_zone\",\n    align = \"center\") %&gt;%\n  cols_align(\n    columns = matches(\"^[0-9]{4}$\"),\n    align = \"right\") %&gt;%\n  tab_style(\n    locations = cells_body(rows = c(11:13)),\n    style = list(\n      cell_fill(color = \"black\"), \n      cell_text(color = \"white\"),\n      cell_borders(\n        sides = c(\"top\", \"bottom\"),\n        style = \"hidden\"))) %&gt;%\n  tab_style(\n    locations = cells_body(\n      columns = !matches(\"^[0-9]{4}$\"),\n      rows = c(11:13)),\n    style = css(\n      border_top = \"none !important;\",\n      border_bottom = \"none !important;\",\n      border_right = \"solid white 2px !important;\",\n      color = \"white !important;\")) %&gt;%\n  tab_style(\n    locations = cells_body(\n      columns = !matches(\"^[0-9]{4}$\"),\n      rows = c(1:10, 14)),\n    style = cell_borders(\n      sides = \"right\",\n      color = \"black\",\n      style = \"solid\",\n      weight = px(2))) %&gt;%\n  tab_options(\n    row.striping.background_color = \"#A9A9A9\") %&gt;%\n  opt_table_font(font = google_font(\"IBM Plex Sans\"))\n\n\n\n\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n      \n        Services\n      \n      FareZone\n      Stations\n      \n        Train Number\n      \n    \n    \n      A\n      C\n      P\n      8210\n      8242\n      8318\n      8322\n      8338\n      8716\n      8750\n      8756\n    \n  \n  \n    \n\n✓\n2\nChestnut Hill West\n6:51 AM\n2:49 PM\n8:49 AM\n9:49 AM\n1:52 PM\n8:08 AM\n4:48 PM\n6:20 PM\n    \n\n✓\n2\nHighland\n6:52 AM\n2:50 PM\n8:50 AM\n9:50 AM\n1:53 PM\n8:09 AM\n4:49 PM\n6:21 PM\n    \n\n✓\n1\nSt. Martins\n6:54 AM\n2:52 PM\n8:52 AM\n9:52 AM\n1:55 PM\n8:11 AM\n4:51 PM\n6:23 PM\n    \n\n✓\n1\nRichard Allen Lane\n6:56 AM\n2:54 PM\n8:54 AM\n9:54 AM\n1:57 PM\n8:13 AM\n4:53 PM\n6:25 PM\n    ✓\n\n✓\n1\nCarpenter\n6:58 AM\n2:56 PM\n8:56 AM\n9:56 AM\n1:59 PM\n8:15 AM\n4:55 PM\n6:27 PM\n    \n\n\n1\nUpsal\n7:00 AM\n2:58 PM\n8:58 AM\n9:58 AM\n2:01 PM\n8:17 AM\n4:57 PM\n6:29 PM\n    ✓\n✓\n\nC\nTulpehocken\n7:02 AM\n3:00 PM\n9:00 AM\n10:00 AM\n2:03 PM\n8:19 AM\n4:59 PM\n6:31 PM\n    ✓\n✓\n\nC\nChelten Avenue\n7:04 AM\n3:02 PM\n9:02 AM\n10:02 AM\n2:05 PM\n8:21 AM\n5:01 PM\n6:33 PM\n    ✓\n✓\n\nC\nQueen Lane\n7:06 AM\n3:04 PM\n9:04 AM\n10:04 AM\n2:07 PM\n8:23 AM\n5:03 PM\n6:35 PM\n    ✓\n\n\nC\nNorth Philadelphia\n7:12 AM\n3:12 PM\n9:12 AM\n10:12 AM\n2:15 PM\n8:29 AM\n5:09 PM\n6:41 PM\n    ✓\n\n✓\n2\nGray 30th Street\n7:23 AM\n3:23 PM\n9:23 AM\n10:23 AM\n2:26 PM\n8:42 AM\n5:20 PM\n6:54 PM\n    \n\n✓\n2\nSuburban Station\n7:28 AM\n3:28 PM\n9:28 AM\n10:28 AM\n2:31 PM\n8:47 AM\n5:25 PM\n6:59 PM\n    \n\n✓\n2\nJefferson Station\n7:33 AM\n3:33 PM\n9:33 AM\n10:33 AM\n2:36 PM\n8:52 AM\n5:30 PM\n7:04 PM\n    ✓\n\n✓\n2\nTemple University\n7:37 AM\n3:37 PM\n9:37 AM\n10:37 AM\n2:40 PM\n8:57 AM\n5:35 PM\n7:08 PM"
  },
  {
    "objectID": "sea_urchins.html",
    "href": "sea_urchins.html",
    "title": "Sea Urchins",
    "section": "",
    "text": "library(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.7     ✔ recipes      1.1.1\n✔ dials        1.4.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.0     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n\nlibrary(readr)\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:yardstick':\n\n    spec\n\n\nThe following object is masked from 'package:scales':\n\n    col_factor\n\nlibrary(broom.mixed)\nlibrary(dotwhisker)\n\nFrom tidymodels.\n\nurchins &lt;-\n  read_csv(\"https://tidymodels.org/start/models/urchins.csv\") %&gt;% \n  setNames(c(\"food_regime\", \"initial_volume\", \"width\")) %&gt;% \n  mutate(food_regime = factor(food_regime, levels = c(\"Initial\", \"Low\", \"High\")))\n\nRows: 72 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): TREAT\ndbl (2): IV, SUTW\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nurchins %&gt;%\n  ggplot(aes(\n    x = initial_volume, \n    y = width, \n    group = food_regime, \n    col = food_regime)) + \n  geom_point() + \n  geom_smooth(method = lm, se = F) +\n  scale_color_viridis_d(option = \"plasma\", end = .7)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nlm_fit &lt;- \n  linear_reg() %&gt;%\n  fit(width ~ initial_volume * food_regime, data = urchins) \n\nlm_fit %&gt;%\n  tidy()\n\n# A tibble: 6 × 5\n  term                            estimate std.error statistic  p.value\n  &lt;chr&gt;                              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                     0.0331    0.00962      3.44  0.00100 \n2 initial_volume                  0.00155   0.000398     3.91  0.000222\n3 food_regimeLow                  0.0198    0.0130       1.52  0.133   \n4 food_regimeHigh                 0.0214    0.0145       1.47  0.145   \n5 initial_volume:food_regimeLow  -0.00126   0.000510    -2.47  0.0162  \n6 initial_volume:food_regimeHigh  0.000525  0.000702     0.748 0.457   \n\n\n\nlm_fit %&gt;%\n  tidy() %&gt;%\n  dwplot(\n    dot_args = list(size = 2, color = \"black\"),\n    whisker_args = list(color = \"black\"),\n    vline = geom_vline(xintercept = 0, colour = \"grey50\", linetype = 2))"
  },
  {
    "objectID": "sea_urchins.html#quarto",
    "href": "sea_urchins.html#quarto",
    "title": "Sea Urchins",
    "section": "",
    "text": "library(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.7     ✔ recipes      1.1.1\n✔ dials        1.4.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.0     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n\nlibrary(readr)\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:yardstick':\n\n    spec\n\n\nThe following object is masked from 'package:scales':\n\n    col_factor\n\nlibrary(broom.mixed)\nlibrary(dotwhisker)\n\nFrom tidymodels.\n\nurchins &lt;-\n  read_csv(\"https://tidymodels.org/start/models/urchins.csv\") %&gt;% \n  setNames(c(\"food_regime\", \"initial_volume\", \"width\")) %&gt;% \n  mutate(food_regime = factor(food_regime, levels = c(\"Initial\", \"Low\", \"High\")))\n\nRows: 72 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): TREAT\ndbl (2): IV, SUTW\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nurchins %&gt;%\n  ggplot(aes(\n    x = initial_volume, \n    y = width, \n    group = food_regime, \n    col = food_regime)) + \n  geom_point() + \n  geom_smooth(method = lm, se = F) +\n  scale_color_viridis_d(option = \"plasma\", end = .7)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nlm_fit &lt;- \n  linear_reg() %&gt;%\n  fit(width ~ initial_volume * food_regime, data = urchins) \n\nlm_fit %&gt;%\n  tidy()\n\n# A tibble: 6 × 5\n  term                            estimate std.error statistic  p.value\n  &lt;chr&gt;                              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)                     0.0331    0.00962      3.44  0.00100 \n2 initial_volume                  0.00155   0.000398     3.91  0.000222\n3 food_regimeLow                  0.0198    0.0130       1.52  0.133   \n4 food_regimeHigh                 0.0214    0.0145       1.47  0.145   \n5 initial_volume:food_regimeLow  -0.00126   0.000510    -2.47  0.0162  \n6 initial_volume:food_regimeHigh  0.000525  0.000702     0.748 0.457   \n\n\n\nlm_fit %&gt;%\n  tidy() %&gt;%\n  dwplot(\n    dot_args = list(size = 2, color = \"black\"),\n    whisker_args = list(color = \"black\"),\n    vline = geom_vline(xintercept = 0, colour = \"grey50\", linetype = 2))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "Anthony W. Baker",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#featured",
    "href": "index.html#featured",
    "title": "Data Analysis Portfolio",
    "section": "Featured",
    "text": "Featured\n\n\nTidy Tuesday: NYC Elevators\nExploring the tallest and fastest elevators in NYC.\n\n\nSEPTA Transit Timetables\nDemo using Great Tables to style a presentation-worthy table of transit data.\n\n\n\nPage 3\nDetails about the third topic.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#all",
    "href": "index.html#all",
    "title": "Data Analysis Portfolio",
    "section": "All",
    "text": "All\n\nNYC Elevators: Exploring the tallest and fastest elevators in NYC.",
    "crumbs": [
      "Home"
    ]
  }
]