[
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "This dataset comes from the Tidy Tuesday project from December 06, 2022.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#tidy-tuesday-nyc-elevators",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#tidy-tuesday-nyc-elevators",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "This dataset comes from the Tidy Tuesday project from December 06, 2022.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#load-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#load-data",
    "title": "Data Analysis Portfolio",
    "section": "Load data",
    "text": "Load data\nFirst step: let’s load up the Tidyverse and inspect our data.\n\nlibrary(tidyverse)\n\ntheme_set(theme_light())\n\ntt &lt;- tidytuesdayR::tt_load('2022-12-06')\n\n# What are we working with here?\ntt$elevators %&gt;% \n  janitor::clean_names() %&gt;%\n  glimpse()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#inspect-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#inspect-data",
    "title": "Data Analysis Portfolio",
    "section": "Inspect data",
    "text": "Inspect data\nWe’ve got a few data cleaning tasks:\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  count(zip_code, sort = T)\n\n# A tibble: 313 × 2\n    zip_code     n\n       &lt;dbl&gt; &lt;int&gt;\n 1         0  8389\n 2 100210000  3050\n 3 100220000  2505\n 4 100190000  2435\n 5 100010000  2116\n 6 100170000  2071\n 7 100360000  1845\n 8 100160000  1796\n 9 112010000  1440\n10 100180000  1420\n# ℹ 303 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  filter(str_detect(dv_floor_to, \"\\\\D\")) %&gt;%\n  count(dv_floor_to, sort = T)\n\n# A tibble: 504 × 2\n   dv_floor_to     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 PH           1739\n 2 R            1018\n 3 ST            501\n 4 L             234\n 5 G             214\n 6 M             200\n 7 RF            196\n 8 B             172\n 9 2ND           145\n10 3RD           113\n# ℹ 494 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  filter(!str_detect(dv_floor_to, \"\\\\D\")) %&gt;%\n  count(dv_floor_to) %&gt;%\n  arrange(desc(dv_floor_to)) \n\n# A tibble: 103 × 2\n   dv_floor_to     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 94              1\n 2 912             1\n 3 90              2\n 4 9            1439\n 5 86              2\n 6 83              2\n 7 80             13\n 8 8            2020\n 9 77              5\n10 757             1\n# ℹ 93 more rows\n\n\n\ntt$elevators %&gt;%\n  janitor::clean_names() %&gt;%\n  ggplot(aes(longitude, latitude, color = borough)) + \n  geom_point() + \n  labs(title = \"NYC Elevator Locations\")",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#clean-data",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#clean-data",
    "title": "Data Analysis Portfolio",
    "section": "Clean data",
    "text": "Clean data\nI’m gullible, but not that gullible: there shouldn’t be elevators that are 912 stories tall or in the middle of the ocean. Let’s clean this up.\n\nelevators &lt;- tt$elevators %&gt;%\n  janitor::clean_names() %&gt;% # Make column names snake_case\n  rename_all(str_remove, \"^dv_\") %&gt;% # Remove the \"DV_\" that starts many column names\n  mutate(\n    floor_to_raw = floor_to,\n    # Force convert to number, introducing NAs\n    floor_to = as.numeric(floor_to_raw), \n    # Remove bad datapoints with absurdly high floors\n    floor_to = if_else(floor_to &gt; 90, NA, floor_to), \n    # create explicit missing data for missing zipcodes\n    zip_code = na_if(zip_code, 0), \n    # Fix incorrectly formatted zips\n    zip_code = str_sub(zip_code, 1, 5)) %&gt;% \n  # Exclude a geographic outlier\n  filter(longitude &gt; -76) \n\nLooking at our cleaned data, how tall are these elevators?\n\nelevators %&gt;%\n  filter(!is.na(floor_to)) %&gt;%\n  mutate(floor_to = as.numeric(floor_to)) %&gt;%\n  ggplot(aes(floor_to)) + \n  geom_histogram() +\n  scale_x_log10(labels = scales::comma_format(1))",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#building-heights",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#building-heights",
    "title": "Data Analysis Portfolio",
    "section": "Building heights",
    "text": "Building heights\nNow let’s aggregate by building\n\nby_building &lt;- elevators %&gt;%\n  arrange(desc(floor_to)) %&gt;%\n  group_by(bin, house_number, street_name, zip_code, borough, longitude, latitude) %&gt;%\n  summarize(\n    max_floor = na_if(max(floor_to, na.rm = T), -Inf),\n    n_elevators = n(),\n    latitude = mean(latitude, na.rm = T),\n    longitude = mean(longitude, na.rm = T),\n    .groups = \"drop\") %&gt;%\n  arrange(desc(max_floor)) \n\ng &lt;- by_building %&gt;%\n  filter(!is.na(max_floor)) %&gt;%\n  arrange(max_floor) %&gt;%\n  ggplot(aes(longitude, latitude, color = max_floor)) +\n  geom_point() +\n  scale_color_gradient2(\n    trans = \"log10\",\n    low = \"blue\",\n    high = \"red\",\n    midpoint = log10(10)\n  ) + \n  ggthemes::theme_map() + \n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.05, 0.75)) +\n  labs(\n    title = \"Height of NYC elevators\",\n    color = \"Max floor\")\n\ng\n\n\n\n\n\n\n\n\nLet’s make this 3D!\n\nlibrary(rayshader)\nlibrary(rgl)\n\nplot_gg(\n  g, \n  multicore = T, # Use more cores for faster rendering\n  width = 6,     # Increase this (inches) for higher resolution\n  height = 6,    # Increase this (inches) for higher resolution\n  scale = 400    # Increase this for more pronounced elevation scaling\n)\nrglwidget()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-zip-code",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-zip-code",
    "title": "Data Analysis Portfolio",
    "section": "Elevator heights by zip code",
    "text": "Elevator heights by zip code\nJoin in zip code data to explore elevator heights by zip\n\nlibrary(sf)\n\nzip_codes &lt;- read_sf(\"data/Modified Zip Code Tabulation Areas (MODZCTA)_20250310\")\n\nby_zip_code &lt;- by_building %&gt;%\n filter(!is.na(zip_code)) %&gt;%\n group_by(zip_code, borough) %&gt;%\n summarize(\n   n_buildings = n(),\n   # geometric mean is a better measure of central tendency \n   #  because the elevator heights are log-normal\n   geom_mean_height = exp(mean(log(max_floor), na.rm = T)),\n   tallest_building = max(max_floor, na.rm = T),\n   .groups = \"drop\") %&gt;%\n filter(n_buildings &gt;= 20) %&gt;%\n arrange(desc(geom_mean_height))\n\njoined_zip_codes &lt;- zip_codes %&gt;%\n left_join(by_zip_code, by = c(\"modzcta\" = \"zip_code\"))\n # mutate(\n #   elevator_building_density = n_buildings / pop_est)\n\njoined_zip_codes %&gt;%\n ggplot(aes(fill = geom_mean_height)) +\n geom_sf() +\n scale_fill_gradient2(\n   low = \"blue\",\n   high = \"red\",\n   midpoint = log10(6),\n   trans = \"log10\") +\n ggthemes::theme_map() +\n coord_sf(datum = NA) +\n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.05, 0.7)) +\n labs(\n   title = \"Tallest zip codes in NYC\",\n   fill = \"Average (geometric) height of elevators\")",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-borough",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-heights-by-borough",
    "title": "Data Analysis Portfolio",
    "section": "Elevator heights by borough",
    "text": "Elevator heights by borough\nHow do elevator heights vary by borough?\n\nby_building %&gt;%\n  filter(!is.na(borough)) %&gt;%\n  ggplot(aes(max_floor, borough)) +\n  geom_boxplot() + \n  scale_x_log10()\n\n\n\n\n\n\n\n\nAnd for folks less familiar with boxplots, here is the same data presented as densities:\n\nby_building %&gt;%\n  filter(!is.na(borough)) %&gt;%\n  ggplot(aes(max_floor, borough)) +\n  geom_violin() + \n  scale_x_log10()",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  },
  {
    "objectID": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-speed",
    "href": "tidy_tuesday_nyc_elevators/tidy_tuesday_nyc_elevators.html#elevator-speed",
    "title": "Data Analysis Portfolio",
    "section": "Elevator speed",
    "text": "Elevator speed\n\nelevators %&gt;%\n  mutate(floor_from = as.numeric(floor_from)) %&gt;%\n  ggplot(aes(floor_to - floor_from, parse_number(speed_fpm))) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10() +\n  labs(\n    title = \"Elevator heights vs speed\",\n    x = \"Elevator height (floors)\",\n    y = \"Speed (fpm)\")\n\n\n\n\n\n\n\n\nYou can see elevator speeds appear to be correlated with height. In a future analysis, we could find the elevators that are unusual, either unnecessarily fast or too slow given their height.",
    "crumbs": [
      "Analyses",
      "Tidy Tuesday: NYC Elevators"
    ]
  }
]